<?xml version="1.0" encoding="UTF-8" ?>
<class name="PackedByteArray" version="4.0">
	<brief_description>
		A packed [Array] of bytes.
	</brief_description>
	<description>
		An [Array] specifically designed to hold bytes. Packs data tightly, so it saves memory for large array sizes.
		[b]Note:[/b] This type is passed by value and not by reference.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="PackedByteArray">
			<return type="PackedByteArray">
			</return>
			<argument index="0" name="from" type="Array">
			</argument>
			<description>
				Constructs a new [PackedByteArray]. Optionally, you can pass in a generic [Array] that will be converted.
			</description>
		</method>
		<method name="append">
			<return type="void">
			</return>
			<argument index="0" name="byte" type="int">
			</argument>
			<description>
				Appends an element at the end of the array (alias of [method push_back]).
			</description>
		</method>
		<method name="append_array">
			<return type="void">
			</return>
			<argument index="0" name="array" type="PackedByteArray">
			</argument>
			<description>
				Appends a [PackedByteArray] at the end of this array.
			</description>
		</method>
		<method name="compress">
			<return type="PackedByteArray">
			</return>
			<argument index="0" name="compression_mode" type="int" default="0">
			</argument>
			<description>
				Returns a new [PackedByteArray] with the data compressed. Set the compression mode using one of [enum File.CompressionMode]'s constants.
			</description>
		</method>
		<method name="decompress">
			<return type="PackedByteArray">
			</return>
			<argument index="0" name="buffer_size" type="int">
			</argument>
			<argument index="1" name="compression_mode" type="int" default="0">
			</argument>
			<description>
				Returns a new [PackedByteArray] with the data decompressed. Set [code]buffer_size[/code] to the size of the uncompressed data. Set the compression mode using one of [enum File.CompressionMode]'s constants.
			</description>
		</method>
		<method name="empty">
			<return type="bool">
			</return>
			<description>
				Returns [code]true[/code] if the array is empty.
			</description>
		</method>
		<method name="get_string_from_ascii">
			<return type="String">
			</return>
			<description>
				Returns a copy of the array's contents as [String]. Fast alternative to [method get_string_from_utf8] if the content is ASCII-only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use [method get_string_from_utf8].
			</description>
		</method>
		<method name="get_string_from_utf8">
			<return type="String">
			</return>
			<description>
				Returns a copy of the array's contents as [String]. Slower than [method get_string_from_ascii] but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred.
			</description>
		</method>
		<method name="has">
			<return type="bool">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Returns [code]true[/code] if the array contains [code]value[/code].
			</description>
		</method>
		<method name="hex_encode">
			<return type="String">
			</return>
			<description>
				Returns a hexadecimal representation of this array as a [String].
				[codeblock]
				var array = PackedByteArray([11, 46, 255])
				print(array.hex_encode()) # Prints: 0b2eff
				[/codeblock]
			</description>
		</method>
		<method name="insert">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="byte" type="int">
			</argument>
			<description>
				Inserts a new element at a given position in the array. The position must be valid, or at the end of the array ([code]idx == size()[/code]).
			</description>
		</method>
		<method name="invert">
			<return type="void">
			</return>
			<description>
				Reverses the order of the elements in the array.
			</description>
		</method>
		<method name="push_back">
			<return type="void">
			</return>
			<argument index="0" name="byte" type="int">
			</argument>
			<description>
				Appends an element at the end of the array.
			</description>
		</method>
		<method name="remove">
			<return type="void">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Removes an element from the array by index.
			</description>
		</method>
		<method name="resize">
			<return type="void">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
				Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size.
			</description>
		</method>
		<method name="set">
			<return type="void">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="byte" type="int">
			</argument>
			<description>
				Changes the byte at the given index.
			</description>
		</method>
		<method name="size">
			<return type="int">
			</return>
			<description>
				Returns the size of the array.
			</description>
		</method>
		<method name="sort">
			<return type="void">
			</return>
			<description>
				Sorts the elements of the array in ascending order.
			</description>
		</method>
		<method name="subarray">
			<return type="PackedByteArray">
			</return>
			<argument index="0" name="from" type="int">
			</argument>
			<argument index="1" name="to" type="int">
			</argument>
			<description>
				Returns the slice of the [PackedByteArray] between indices (inclusive) as a new [PackedByteArray]. Any negative index is considered to be from the end of the array.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
